/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package crypto.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroKeyVersion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroKeyVersion\",\"namespace\":\"crypto.avro\",\"fields\":[{\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"name\":\"encryptedIV\",\"type\":\"bytes\"},{\"name\":\"versionName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer encryptedKey;
  @Deprecated public java.nio.ByteBuffer encryptedIV;
  @Deprecated public java.lang.CharSequence versionName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AvroKeyVersion() {}

  /**
   * All-args constructor.
   */
  public AvroKeyVersion(java.nio.ByteBuffer encryptedKey, java.nio.ByteBuffer encryptedIV, java.lang.CharSequence versionName) {
    this.encryptedKey = encryptedKey;
    this.encryptedIV = encryptedIV;
    this.versionName = versionName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return encryptedKey;
    case 1: return encryptedIV;
    case 2: return versionName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: encryptedKey = (java.nio.ByteBuffer)value$; break;
    case 1: encryptedIV = (java.nio.ByteBuffer)value$; break;
    case 2: versionName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'encryptedKey' field.
   */
  public java.nio.ByteBuffer getEncryptedKey() {
    return encryptedKey;
  }

  /**
   * Sets the value of the 'encryptedKey' field.
   * @param value the value to set.
   */
  public void setEncryptedKey(java.nio.ByteBuffer value) {
    this.encryptedKey = value;
  }

  /**
   * Gets the value of the 'encryptedIV' field.
   */
  public java.nio.ByteBuffer getEncryptedIV() {
    return encryptedIV;
  }

  /**
   * Sets the value of the 'encryptedIV' field.
   * @param value the value to set.
   */
  public void setEncryptedIV(java.nio.ByteBuffer value) {
    this.encryptedIV = value;
  }

  /**
   * Gets the value of the 'versionName' field.
   */
  public java.lang.CharSequence getVersionName() {
    return versionName;
  }

  /**
   * Sets the value of the 'versionName' field.
   * @param value the value to set.
   */
  public void setVersionName(java.lang.CharSequence value) {
    this.versionName = value;
  }

  /** Creates a new AvroKeyVersion RecordBuilder */
  public static crypto.avro.AvroKeyVersion.Builder newBuilder() {
    return new crypto.avro.AvroKeyVersion.Builder();
  }
  
  /** Creates a new AvroKeyVersion RecordBuilder by copying an existing Builder */
  public static crypto.avro.AvroKeyVersion.Builder newBuilder(crypto.avro.AvroKeyVersion.Builder other) {
    return new crypto.avro.AvroKeyVersion.Builder(other);
  }
  
  /** Creates a new AvroKeyVersion RecordBuilder by copying an existing AvroKeyVersion instance */
  public static crypto.avro.AvroKeyVersion.Builder newBuilder(crypto.avro.AvroKeyVersion other) {
    return new crypto.avro.AvroKeyVersion.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroKeyVersion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroKeyVersion>
    implements org.apache.avro.data.RecordBuilder<AvroKeyVersion> {

    private java.nio.ByteBuffer encryptedKey;
    private java.nio.ByteBuffer encryptedIV;
    private java.lang.CharSequence versionName;

    /** Creates a new Builder */
    private Builder() {
      super(crypto.avro.AvroKeyVersion.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(crypto.avro.AvroKeyVersion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.encryptedKey)) {
        this.encryptedKey = data().deepCopy(fields()[0].schema(), other.encryptedKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.encryptedIV)) {
        this.encryptedIV = data().deepCopy(fields()[1].schema(), other.encryptedIV);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.versionName)) {
        this.versionName = data().deepCopy(fields()[2].schema(), other.versionName);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AvroKeyVersion instance */
    private Builder(crypto.avro.AvroKeyVersion other) {
            super(crypto.avro.AvroKeyVersion.SCHEMA$);
      if (isValidValue(fields()[0], other.encryptedKey)) {
        this.encryptedKey = data().deepCopy(fields()[0].schema(), other.encryptedKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.encryptedIV)) {
        this.encryptedIV = data().deepCopy(fields()[1].schema(), other.encryptedIV);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.versionName)) {
        this.versionName = data().deepCopy(fields()[2].schema(), other.versionName);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'encryptedKey' field */
    public java.nio.ByteBuffer getEncryptedKey() {
      return encryptedKey;
    }
    
    /** Sets the value of the 'encryptedKey' field */
    public crypto.avro.AvroKeyVersion.Builder setEncryptedKey(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.encryptedKey = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'encryptedKey' field has been set */
    public boolean hasEncryptedKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'encryptedKey' field */
    public crypto.avro.AvroKeyVersion.Builder clearEncryptedKey() {
      encryptedKey = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'encryptedIV' field */
    public java.nio.ByteBuffer getEncryptedIV() {
      return encryptedIV;
    }
    
    /** Sets the value of the 'encryptedIV' field */
    public crypto.avro.AvroKeyVersion.Builder setEncryptedIV(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.encryptedIV = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'encryptedIV' field has been set */
    public boolean hasEncryptedIV() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'encryptedIV' field */
    public crypto.avro.AvroKeyVersion.Builder clearEncryptedIV() {
      encryptedIV = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'versionName' field */
    public java.lang.CharSequence getVersionName() {
      return versionName;
    }
    
    /** Sets the value of the 'versionName' field */
    public crypto.avro.AvroKeyVersion.Builder setVersionName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.versionName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'versionName' field has been set */
    public boolean hasVersionName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'versionName' field */
    public crypto.avro.AvroKeyVersion.Builder clearVersionName() {
      versionName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AvroKeyVersion build() {
      try {
        AvroKeyVersion record = new AvroKeyVersion();
        record.encryptedKey = fieldSetFlags()[0] ? this.encryptedKey : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.encryptedIV = fieldSetFlags()[1] ? this.encryptedIV : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.versionName = fieldSetFlags()[2] ? this.versionName : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
